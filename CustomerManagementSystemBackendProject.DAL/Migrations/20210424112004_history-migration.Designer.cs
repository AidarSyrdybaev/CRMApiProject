// <auto-generated />
using System;
using CustomerManagementSystemBackendProject.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CustomerManagementSystemBackendProject.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210424112004_history-migration")]
    partial class historymigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.ChosenLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CallDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ChoseDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("LeadId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("ChosenLeads");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("HasLaptop")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Client");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.ForgotPaswwordKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("Key")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ForgotPaswwordKeys");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("Months")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OneMounthSum")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("History");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.LeadComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("LeadId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("LeadComments");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.LeadFailureStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("leadFailureStatuses");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.LeadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LeadStatuses");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentPlace")
                        .HasColumnType("text");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("integer");

                    b.Property<double>("Sum")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentComments");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patent")
                        .HasColumnType("text");

                    b.Property<DateTime>("PatentEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PatentStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CourseId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Lead", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.Client");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FlexById")
                        .HasColumnType("text");

                    b.Property<int?>("LeadFailureStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("LeadStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasIndex("CourseId");

                    b.HasIndex("LeadFailureStatusId");

                    b.HasIndex("LeadStatusId");

                    b.HasDiscriminator().HasValue("Lead");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Student", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.Client");

                    b.Property<int?>("LeadId")
                        .HasColumnType("integer");

                    b.HasIndex("LeadId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.CityHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.HasIndex("CityId");

                    b.HasDiscriminator().HasValue("CityHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.CourseHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("CourseHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.ForgotPasswordKeyHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("ForgotPasswordKeyId")
                        .HasColumnType("integer");

                    b.Property<int?>("ForgotPaswwordKeyId")
                        .HasColumnType("integer");

                    b.HasIndex("ForgotPaswwordKeyId");

                    b.HasDiscriminator().HasValue("ForgotPasswordKeyHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.GroupHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("GroupHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.LeadHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("LeadId")
                        .HasColumnType("integer");

                    b.HasIndex("LeadId");

                    b.HasDiscriminator().HasValue("LeadHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.PaymentHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer");

                    b.HasIndex("PaymentId");

                    b.HasDiscriminator().HasValue("PaymentHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentGroupHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("integer");

                    b.HasIndex("StudentGroupId");

                    b.HasDiscriminator().HasValue("StudentGroupHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("StudentHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.TeacherHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("TeacherHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.UserHistory", b =>
                {
                    b.HasBaseType("CustomerManagementSystemBackendProject.DAL.Entities.History");

                    b.HasDiscriminator().HasValue("UserHistory");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.ChosenLead", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Lead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Client", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Course", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.City", "City")
                        .WithMany("Courses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.ForgotPaswwordKey", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Group", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.History", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.LeadComment", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Payment", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.StudentGroup", "StudentGroup")
                        .WithMany("Payments")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentComment", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Student", "Student")
                        .WithMany("StudentComments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentGroup", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Teacher", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Course", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.User", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Lead", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.LeadFailureStatus", "LeadFailureStatus")
                        .WithMany()
                        .HasForeignKey("LeadFailureStatusId");

                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.LeadStatus", "LeadStatus")
                        .WithMany("Leads")
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LeadFailureStatus");

                    b.Navigation("LeadStatus");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Student", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.CityHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.CourseHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Course", "Course")
                        .WithMany("courseHistories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.ForgotPasswordKeyHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.ForgotPaswwordKey", "ForgotPaswwordKey")
                        .WithMany()
                        .HasForeignKey("ForgotPaswwordKeyId");

                    b.Navigation("ForgotPaswwordKey");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.GroupHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.LeadHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.PaymentHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentGroupHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.TeacherHistory", b =>
                {
                    b.HasOne("CustomerManagementSystemBackendProject.DAL.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.City", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Course", b =>
                {
                    b.Navigation("courseHistories");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Group", b =>
                {
                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.LeadStatus", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.StudentGroup", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Teacher", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("CustomerManagementSystemBackendProject.DAL.Entities.Student", b =>
                {
                    b.Navigation("StudentComments");

                    b.Navigation("StudentGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
